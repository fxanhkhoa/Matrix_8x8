
Matrix_8x8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  000002e2  00000356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d26  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000054c  00000000  00000000  00001212  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032c  00000000  00000000  0000175e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001fc  00000000  00000000  00001a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000345  00000000  00000000  00001c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006c4  00000000  00000000  00001fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00002691  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  54:	98 00       	.word	0x0098	; ????
  56:	9a 00       	.word	0x009a	; ????
  58:	9c 00       	.word	0x009c	; ????
  5a:	9e 00       	.word	0x009e	; ????
  5c:	a0 00       	.word	0x00a0	; ????
  5e:	a2 00       	.word	0x00a2	; ????
  60:	a4 00       	.word	0x00a4	; ????
  62:	a6 00       	.word	0x00a6	; ????
  64:	b0 00       	.word	0x00b0	; ????
  66:	b2 00       	.word	0x00b2	; ????
  68:	b4 00       	.word	0x00b4	; ????
  6a:	b6 00       	.word	0x00b6	; ????
  6c:	b8 00       	.word	0x00b8	; ????
  6e:	ba 00       	.word	0x00ba	; ????
  70:	bc 00       	.word	0x00bc	; ????
  72:	be 00       	.word	0x00be	; ????
  74:	c9 00       	.word	0x00c9	; ????
  76:	cb 00       	.word	0x00cb	; ????
  78:	cd 00       	.word	0x00cd	; ????
  7a:	cf 00       	.word	0x00cf	; ????
  7c:	d1 00       	.word	0x00d1	; ????
  7e:	d3 00       	.word	0x00d3	; ????
  80:	d5 00       	.word	0x00d5	; ????
  82:	d7 00       	.word	0x00d7	; ????
  84:	e1 00       	.word	0x00e1	; ????
  86:	e3 00       	.word	0x00e3	; ????
  88:	e5 00       	.word	0x00e5	; ????
  8a:	e7 00       	.word	0x00e7	; ????
  8c:	e9 00       	.word	0x00e9	; ????
  8e:	eb 00       	.word	0x00eb	; ????
  90:	ed 00       	.word	0x00ed	; ????
  92:	ef 00       	.word	0x00ef	; ????

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf e5       	ldi	r28, 0x5F	; 95
  9a:	d4 e0       	ldi	r29, 0x04	; 4
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	10 e0       	ldi	r17, 0x00	; 0
  a2:	a0 e6       	ldi	r26, 0x60	; 96
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	e2 ee       	ldi	r30, 0xE2	; 226
  a8:	f2 e0       	ldi	r31, 0x02	; 2
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0
  b0:	a0 3e       	cpi	r26, 0xE0	; 224
  b2:	b1 07       	cpc	r27, r17
  b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  ba:	0c 94 6f 01 	jmp	0x2de	; 0x2de <_exit>

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <main>:

#include "main.h"


int main(void)
{
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
  ca:	c0 58       	subi	r28, 0x80	; 128
  cc:	d1 09       	sbc	r29, r1
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	f8 94       	cli
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	cd bf       	out	0x3d, r28	; 61
	long i = 0;
	//Matrix8x8 matrix1;
	Matrix_Text matrix;
  d8:	ce 01       	movw	r24, r28
  da:	8f 5b       	subi	r24, 0xBF	; 191
  dc:	9f 4f       	sbci	r25, 0xFF	; 255
  de:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_ZN11Matrix_TextC1Ev>
    /* Replace with your application code */
	//matrix.A();
	//matrix.B();
    while (1) 
    {
		matrix.B();
  e2:	be 01       	movw	r22, r28
  e4:	6f 5b       	subi	r22, 0xBF	; 191
  e6:	7f 4f       	sbci	r23, 0xFF	; 255
  e8:	ce 01       	movw	r24, r28
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_ZN11Matrix_Text1BEv>
  f0:	ce 01       	movw	r24, r28
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN11Matrix_TextD1Ev>
  f8:	f4 cf       	rjmp	.-24     	; 0xe2 <main+0x20>

000000fa <_ZN9Matrix8x8C1Ev>:
#include <avr/io.h>

// default constructor
Matrix8x8::Matrix8x8()
{
	DDRD |= 0b11000000;
  fa:	81 b3       	in	r24, 0x11	; 17
  fc:	80 6c       	ori	r24, 0xC0	; 192
  fe:	81 bb       	out	0x11, r24	; 17
	DDRC |= 0b11111100;
 100:	84 b3       	in	r24, 0x14	; 20
 102:	8c 6f       	ori	r24, 0xFC	; 252
 104:	84 bb       	out	0x14, r24	; 20
	DDRB |= 0xFF;
 106:	87 b3       	in	r24, 0x17	; 23
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	87 bb       	out	0x17, r24	; 23
	
	PORTB = 0xff;
 10c:	88 bb       	out	0x18, r24	; 24
	PORTD &= ~(0b11000000);
 10e:	82 b3       	in	r24, 0x12	; 18
 110:	8f 73       	andi	r24, 0x3F	; 63
 112:	82 bb       	out	0x12, r24	; 18
	PORTC &= ~(0b11111100);
 114:	85 b3       	in	r24, 0x15	; 21
 116:	83 70       	andi	r24, 0x03	; 3
 118:	85 bb       	out	0x15, r24	; 21
 11a:	08 95       	ret

0000011c <_ZN9Matrix8x8D1Ev>:
} //Matrix8x8

// default destructor
Matrix8x8::~Matrix8x8()
 11c:	08 95       	ret

0000011e <_ZN9Matrix8x82OnEii>:
	
} //~Matrix8x8

void Matrix8x8::On(int x, int y)
{
	switch (x)
 11e:	fb 01       	movw	r30, r22
 120:	31 97       	sbiw	r30, 0x01	; 1
 122:	e8 30       	cpi	r30, 0x08	; 8
 124:	f1 05       	cpc	r31, r1
 126:	98 f4       	brcc	.+38     	; 0x14e <_ZN9Matrix8x82OnEii+0x30>
 128:	e6 5d       	subi	r30, 0xD6	; 214
 12a:	ff 4f       	sbci	r31, 0xFF	; 255
 12c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__tablejump2__>
	{
		case 1:
		PORTB &= ~(1 << Row1);
 130:	c7 98       	cbi	0x18, 7	; 24
		break;
 132:	0d c0       	rjmp	.+26     	; 0x14e <_ZN9Matrix8x82OnEii+0x30>
		case 2:
		PORTB &= ~(1 << Row2);
 134:	c6 98       	cbi	0x18, 6	; 24
		break;
 136:	0b c0       	rjmp	.+22     	; 0x14e <_ZN9Matrix8x82OnEii+0x30>
		case 3:
		PORTB &= ~(1 << Row3);
 138:	c5 98       	cbi	0x18, 5	; 24
		break;
 13a:	09 c0       	rjmp	.+18     	; 0x14e <_ZN9Matrix8x82OnEii+0x30>
		case 4:
		PORTB &= ~(1 << Row4);
 13c:	c4 98       	cbi	0x18, 4	; 24
		break;
 13e:	07 c0       	rjmp	.+14     	; 0x14e <_ZN9Matrix8x82OnEii+0x30>
		case 5:
		PORTB &= ~(1 << Row5);
 140:	c3 98       	cbi	0x18, 3	; 24
		break;
 142:	05 c0       	rjmp	.+10     	; 0x14e <_ZN9Matrix8x82OnEii+0x30>
		case 6:
		PORTB &= ~(1 << Row6);
 144:	c2 98       	cbi	0x18, 2	; 24
		break;
 146:	03 c0       	rjmp	.+6      	; 0x14e <_ZN9Matrix8x82OnEii+0x30>
		case 7:
		PORTB &= ~(1 << Row7);
 148:	c1 98       	cbi	0x18, 1	; 24
		break;
 14a:	01 c0       	rjmp	.+2      	; 0x14e <_ZN9Matrix8x82OnEii+0x30>
		case 8:
		PORTB &= ~(1 << Row8);
 14c:	c0 98       	cbi	0x18, 0	; 24
		break;
		default:
		break;
	}
	switch (y)
 14e:	fa 01       	movw	r30, r20
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	e8 30       	cpi	r30, 0x08	; 8
 154:	f1 05       	cpc	r31, r1
 156:	98 f4       	brcc	.+38     	; 0x17e <_ZN9Matrix8x82OnEii+0x60>
 158:	ee 5c       	subi	r30, 0xCE	; 206
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__tablejump2__>
	{
		case 1:
		PORTD |= (1 << Col1);
 160:	96 9a       	sbi	0x12, 6	; 18
		break;
 162:	08 95       	ret
		case 2:
		PORTD |= (1 << Col2);
 164:	97 9a       	sbi	0x12, 7	; 18
		break;
 166:	08 95       	ret
		case 3:
		PORTC |= (1 << Col3);
 168:	aa 9a       	sbi	0x15, 2	; 21
		break;
 16a:	08 95       	ret
		case 4:
		PORTC |= (1 << Col4);
 16c:	ab 9a       	sbi	0x15, 3	; 21
		break;
 16e:	08 95       	ret
		case 5:
		PORTC |= (1 << Col5);
 170:	ac 9a       	sbi	0x15, 4	; 21
		break;
 172:	08 95       	ret
		case 6:
		PORTC |= (1 << Col6);
 174:	ad 9a       	sbi	0x15, 5	; 21
		break;
 176:	08 95       	ret
		case 7:
		PORTC |= (1 << Col7);
 178:	ae 9a       	sbi	0x15, 6	; 21
		break;
 17a:	08 95       	ret
		case 8:
		PORTC |= (1 << Col8);
 17c:	af 9a       	sbi	0x15, 7	; 21
 17e:	08 95       	ret

00000180 <_ZN9Matrix8x83OffEii>:
	}
}

void Matrix8x8::Off(int x, int y)
{
	switch (x)
 180:	fb 01       	movw	r30, r22
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	e8 30       	cpi	r30, 0x08	; 8
 186:	f1 05       	cpc	r31, r1
 188:	98 f4       	brcc	.+38     	; 0x1b0 <_ZN9Matrix8x83OffEii+0x30>
 18a:	e6 5c       	subi	r30, 0xC6	; 198
 18c:	ff 4f       	sbci	r31, 0xFF	; 255
 18e:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__tablejump2__>
	{
		case 1:
		PORTB |= (1 << Row1);
 192:	c7 9a       	sbi	0x18, 7	; 24
		break;
 194:	0d c0       	rjmp	.+26     	; 0x1b0 <_ZN9Matrix8x83OffEii+0x30>
		case 2:
		PORTB |= (1 << Row2);
 196:	c6 9a       	sbi	0x18, 6	; 24
		break;
 198:	0b c0       	rjmp	.+22     	; 0x1b0 <_ZN9Matrix8x83OffEii+0x30>
		case 3:
		PORTB |= (1 << Row3);
 19a:	c5 9a       	sbi	0x18, 5	; 24
		break;
 19c:	09 c0       	rjmp	.+18     	; 0x1b0 <_ZN9Matrix8x83OffEii+0x30>
		case 4:
		PORTB |= (1 << Row4);
 19e:	c4 9a       	sbi	0x18, 4	; 24
		break;
 1a0:	07 c0       	rjmp	.+14     	; 0x1b0 <_ZN9Matrix8x83OffEii+0x30>
		case 5:
		PORTB |= (1 << Row5);
 1a2:	c3 9a       	sbi	0x18, 3	; 24
		break;
 1a4:	05 c0       	rjmp	.+10     	; 0x1b0 <_ZN9Matrix8x83OffEii+0x30>
		case 6:
		PORTB |= (1 << Row6);
 1a6:	c2 9a       	sbi	0x18, 2	; 24
		break;
 1a8:	03 c0       	rjmp	.+6      	; 0x1b0 <_ZN9Matrix8x83OffEii+0x30>
		case 7:
		PORTB |= (1 << Row7);
 1aa:	c1 9a       	sbi	0x18, 1	; 24
		break;
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <_ZN9Matrix8x83OffEii+0x30>
		case 8:
		PORTB |= (1 << Row8);
 1ae:	c0 9a       	sbi	0x18, 0	; 24
		break;
		default:
		break;
	}
	switch (y)
 1b0:	fa 01       	movw	r30, r20
 1b2:	31 97       	sbiw	r30, 0x01	; 1
 1b4:	e8 30       	cpi	r30, 0x08	; 8
 1b6:	f1 05       	cpc	r31, r1
 1b8:	98 f4       	brcc	.+38     	; 0x1e0 <_ZN9Matrix8x83OffEii+0x60>
 1ba:	ee 5b       	subi	r30, 0xBE	; 190
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__tablejump2__>
	{
		case 1:
		PORTD &= ~(1 << Col1);
 1c2:	96 98       	cbi	0x12, 6	; 18
		break;
 1c4:	08 95       	ret
		case 2:
		PORTD &= ~(1 << Col2);
 1c6:	97 98       	cbi	0x12, 7	; 18
		break;
 1c8:	08 95       	ret
		case 3:
		PORTC &= ~(1 << Col3);
 1ca:	aa 98       	cbi	0x15, 2	; 21
		break;
 1cc:	08 95       	ret
		case 4:
		PORTC &= ~(1 << Col4);
 1ce:	ab 98       	cbi	0x15, 3	; 21
		break;
 1d0:	08 95       	ret
		case 5:
		PORTC &= ~(1 << Col5);
 1d2:	ac 98       	cbi	0x15, 4	; 21
		break;
 1d4:	08 95       	ret
		case 6:
		PORTC &= ~(1 << Col6);
 1d6:	ad 98       	cbi	0x15, 5	; 21
		break;
 1d8:	08 95       	ret
		case 7:
		PORTC &= ~(1 << Col7);
 1da:	ae 98       	cbi	0x15, 6	; 21
		break;
 1dc:	08 95       	ret
		case 8:
		PORTC &= ~(1 << Col8);
 1de:	af 98       	cbi	0x15, 7	; 21
 1e0:	08 95       	ret

000001e2 <_ZN11Matrix_TextC1Ev>:

#include "Matrix_Text.h"


// default constructor
Matrix_Text::Matrix_Text()
 1e2:	0e 94 7d 00 	call	0xfa	; 0xfa <_ZN9Matrix8x8C1Ev>
 1e6:	08 95       	ret

000001e8 <_ZN11Matrix_TextD1Ev>:
{
	//Matrix8x8 matrix;
} //Matrix_Text

// default destructor
Matrix_Text::~Matrix_Text()
 1e8:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN9Matrix8x8D1Ev>
 1ec:	08 95       	ret

000001ee <_ZN11Matrix_Text1BEv>:
			}
	return this->A();
}

Matrix_Text Matrix_Text::B()
{
 1ee:	4f 92       	push	r4
 1f0:	5f 92       	push	r5
 1f2:	6f 92       	push	r6
 1f4:	7f 92       	push	r7
 1f6:	8f 92       	push	r8
 1f8:	9f 92       	push	r9
 1fa:	af 92       	push	r10
 1fc:	bf 92       	push	r11
 1fe:	cf 92       	push	r12
 200:	df 92       	push	r13
 202:	ef 92       	push	r14
 204:	ff 92       	push	r15
 206:	0f 93       	push	r16
 208:	1f 93       	push	r17
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
 212:	c0 54       	subi	r28, 0x40	; 64
 214:	d1 09       	sbc	r29, r1
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	f8 94       	cli
 21a:	de bf       	out	0x3e, r29	; 62
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	cd bf       	out	0x3d, r28	; 61
 220:	3c 01       	movw	r6, r24
 222:	4b 01       	movw	r8, r22
			   		   0,1,0,0,0,1,0,0,
					   0,1,1,1,1,0,0,0,
					   0,1,0,0,1,0,0,0,
					   0,1,0,0,0,1,0,0,
					   0,1,0,0,0,1,0,0,
					   0,1,1,1,1,0,0,0};
 224:	80 e4       	ldi	r24, 0x40	; 64
 226:	e0 ea       	ldi	r30, 0xA0	; 160
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	de 01       	movw	r26, r28
 22c:	11 96       	adiw	r26, 0x01	; 1
 22e:	01 90       	ld	r0, Z+
 230:	0d 92       	st	X+, r0
 232:	8a 95       	dec	r24
 234:	e1 f7       	brne	.-8      	; 0x22e <_ZN11Matrix_Text1BEv+0x40>
 236:	ce 01       	movw	r24, r28
 238:	01 96       	adiw	r24, 0x01	; 1
 23a:	5c 01       	movw	r10, r24
 23c:	cc 24       	eor	r12, r12
 23e:	c3 94       	inc	r12
 240:	d1 2c       	mov	r13, r1
			}
	return this->A();
}

Matrix_Text Matrix_Text::B()
{
 242:	41 2c       	mov	r4, r1
 244:	51 2c       	mov	r5, r1
 246:	24 c0       	rjmp	.+72     	; 0x290 <_ZN11Matrix_Text1BEv+0xa2>
					   0,1,0,0,0,1,0,0,
					   0,1,1,1,1,0,0,0};
	for (int i = 0; i <= 7;i++)
		for (int j =0; j <= 7; j++)
		{
			if (text[i][j] == 1)
 248:	f7 01       	movw	r30, r14
 24a:	81 91       	ld	r24, Z+
 24c:	7f 01       	movw	r14, r30
 24e:	0f 5f       	subi	r16, 0xFF	; 255
 250:	1f 4f       	sbci	r17, 0xFF	; 255
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	81 f4       	brne	.+32     	; 0x276 <_ZN11Matrix_Text1BEv+0x88>
			{
				On(i+1,j+1);
 256:	a8 01       	movw	r20, r16
 258:	b6 01       	movw	r22, r12
 25a:	c4 01       	movw	r24, r8
 25c:	0e 94 8f 00 	call	0x11e	; 0x11e <_ZN9Matrix8x82OnEii>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 260:	8f ec       	ldi	r24, 0xCF	; 207
 262:	97 e0       	ldi	r25, 0x07	; 7
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <_ZN11Matrix_Text1BEv+0x76>
 268:	00 c0       	rjmp	.+0      	; 0x26a <_ZN11Matrix_Text1BEv+0x7c>
 26a:	00 00       	nop
				_delay_ms(1);
				Off(i+1,j+1);
 26c:	a8 01       	movw	r20, r16
 26e:	b6 01       	movw	r22, r12
 270:	c4 01       	movw	r24, r8
 272:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN9Matrix8x83OffEii>
					   0,1,0,0,1,0,0,0,
					   0,1,0,0,0,1,0,0,
					   0,1,0,0,0,1,0,0,
					   0,1,1,1,1,0,0,0};
	for (int i = 0; i <= 7;i++)
		for (int j =0; j <= 7; j++)
 276:	08 30       	cpi	r16, 0x08	; 8
 278:	11 05       	cpc	r17, r1
 27a:	31 f7       	brne	.-52     	; 0x248 <_ZN11Matrix_Text1BEv+0x5a>
 27c:	9f ef       	ldi	r25, 0xFF	; 255
 27e:	c9 1a       	sub	r12, r25
 280:	d9 0a       	sbc	r13, r25
 282:	e8 e0       	ldi	r30, 0x08	; 8
 284:	ae 0e       	add	r10, r30
 286:	b1 1c       	adc	r11, r1
					   0,1,1,1,1,0,0,0,
					   0,1,0,0,1,0,0,0,
					   0,1,0,0,0,1,0,0,
					   0,1,0,0,0,1,0,0,
					   0,1,1,1,1,0,0,0};
	for (int i = 0; i <= 7;i++)
 288:	f9 e0       	ldi	r31, 0x09	; 9
 28a:	cf 16       	cp	r12, r31
 28c:	d1 04       	cpc	r13, r1
 28e:	21 f0       	breq	.+8      	; 0x298 <_ZN11Matrix_Text1BEv+0xaa>
			}
	return this->A();
}

Matrix_Text Matrix_Text::B()
{
 290:	75 01       	movw	r14, r10
 292:	04 2d       	mov	r16, r4
 294:	15 2d       	mov	r17, r5
 296:	d8 cf       	rjmp	.-80     	; 0x248 <_ZN11Matrix_Text1BEv+0x5a>
				On(i+1,j+1);
				_delay_ms(1);
				Off(i+1,j+1);
			}
		}
	return this->B();
 298:	b4 01       	movw	r22, r8
 29a:	c3 01       	movw	r24, r6
 29c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_ZN11Matrix_Text1BEv>
}
 2a0:	c3 01       	movw	r24, r6
 2a2:	c0 5c       	subi	r28, 0xC0	; 192
 2a4:	df 4f       	sbci	r29, 0xFF	; 255
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	f8 94       	cli
 2aa:	de bf       	out	0x3e, r29	; 62
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	cd bf       	out	0x3d, r28	; 61
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	1f 91       	pop	r17
 2b6:	0f 91       	pop	r16
 2b8:	ff 90       	pop	r15
 2ba:	ef 90       	pop	r14
 2bc:	df 90       	pop	r13
 2be:	cf 90       	pop	r12
 2c0:	bf 90       	pop	r11
 2c2:	af 90       	pop	r10
 2c4:	9f 90       	pop	r9
 2c6:	8f 90       	pop	r8
 2c8:	7f 90       	pop	r7
 2ca:	6f 90       	pop	r6
 2cc:	5f 90       	pop	r5
 2ce:	4f 90       	pop	r4
 2d0:	08 95       	ret

000002d2 <__tablejump2__>:
 2d2:	ee 0f       	add	r30, r30
 2d4:	ff 1f       	adc	r31, r31
 2d6:	05 90       	lpm	r0, Z+
 2d8:	f4 91       	lpm	r31, Z
 2da:	e0 2d       	mov	r30, r0
 2dc:	09 94       	ijmp

000002de <_exit>:
 2de:	f8 94       	cli

000002e0 <__stop_program>:
 2e0:	ff cf       	rjmp	.-2      	; 0x2e0 <__stop_program>
